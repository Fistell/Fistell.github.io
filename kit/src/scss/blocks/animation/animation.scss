.box {
  width: 100px;
  height: 100px;
  background-color: green;
  animation: over-and-back 1.5s linear 3;
}

@keyframes over-and-back {
  0% {
    background-color: hsl(0, 50%, 50%);
    transform: translate(0);
  }
  50% {
    transform: translate(50px);
  }
  100% {
    background-color: hsl(270, 50%, 90%);
    transform: translate(0);
  }
}

// The animation property is a shorthand for several properties. In this demo,
// you’ve specified four of them:
//  animation-name (over-and-back)—Indicates the name of the animation as
// defined by the @keyframes rule.
//  animation-duration (1.5s)—Indicates how long the animation lasts; in this
// case, 1.5 seconds.
//  animation-timing-function (linear)—Indicates a timing function describing
// how the animation accelerates and/or decelerates. This can be a Bézier
// curve or a keyword value, like a transition timing function (ease-in, ease-out,
// and so on).
//  animation-iteration-count (3)—Indicates the number of times the animation
// repeats. If omitted, the initial value of 1 is used.

.flyin-grid {
  margin: 0 1rem;
}
.card {
  margin-bottom: 1em;
  padding: 0.5em;
  background-color: white;
  color: hsl(210, 15%, 20%);
  box-shadow: 0.2em 0.5em 1em rgba(0, 0, 0, 0.3);
}
.card > img {
  width: 100%;
}

// Below listing establishes a responsive layout using flexbox. By applying flex-wrap:
// wrap, the flex items line wrap when they don’t fit on the same line. The flex basis of
// 300 px establishes a minimum width, while the max-width establishes a maximum
// one; items will line wrap as needed to fit within these constraints. The flex-grow of 1
// allows the cards to stretch to fill the remaining space.
@media (min-width: 30em) {
  .flyin-grid {
    display: flex;
    flex-wrap: wrap;
    margin: 0 5rem;
  }
  .flyin-grid__item {
    flex: 1 1 300px;
    margin-left: 0.5em;
    margin-right: 0.5em;
    max-width: 600px;
  }
}

// Last row with a single item doesn't match the size. Fix it for newer browsers with grid
@supports (display: grid) {
  .flyin-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    grid-gap: 2em;
  }
  .flyin-grid__item {
    max-width: initial;
    margin: 0; // Removes margins applied by the fallback layout
  }
}

// Adding animation
.flyin-grid {
  perspective: 500px;
}
.flyin-grid__item {
  animation: fly-in 600ms ease-in;
}
@keyframes fly-in {
  0% {
    transform: translateZ(-800px) rotateY(90deg);
    opacity: 0;
  }
  56% {
    transform: translateZ(-160px) rotateY(87deg);
    opacity: 1;
  }
  100% {
    transform: translateZ(0) rotateY(0);
  }
}

// Staggering the animation start times
.flyin-grid__item {
  animation-fill-mode: backwards; // Applies first frame animation styles before animation begins
}
.flyin-grid__item:nth-child(2) {
  animation-delay: 0.15s;
}
.flyin-grid__item:nth-child(3) {
  animation-delay: 0.3s;
}
.flyin-grid__item:nth-child(4) {
  animation-delay: 0.45s;
}

// ------------------------------------------------------------ BUTON
// Listing 16.12 Laying out and styling the form
label,
textarea {
  display: block;
  margin-bottom: 1em;
}
textarea {
  width: 100%;
  font-size: inherit;
}
button {
  padding: 0.6em 1em;
  border: 0;
  background-color: hsl(220, 50%, 50%);
  color: white;
  font: inherit;
  transition: background-color 0.3s linear;
}
button:hover {
  background-color: hsl(220, 45%, 40%);
}
// Defining the spin animation and is-loading state
button.is-loading {
  position: relative;
  color: transparent;
}
button.is-loading::after {
  position: absolute;
  content: "";
  display: block;
  width: 1.4em;
  height: 1.4em;
  top: 50%;
  left: 50%;
  margin-left: -0.7em;
  margin-top: -0.7em;
  border-top: 2px solid white;
  border-radius: 50%;
  animation: spin 0.5s linear infinite;
}
@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

// Listing 16.15 Defining the shake animation (to encourage save)
.shake {
  animation: shake 0.7s linear;
}
@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  10%,
  30%,
  50%,
  70% {
    transform: translateX(-0.4em);
  }
  20%,
  40%,
  60% {
    transform: translateX(0.4em);
  }
  80% {
    transform: translateX(0.3em);
  }
  90% {
    transform: translateX(-0.3em);
  }
}
